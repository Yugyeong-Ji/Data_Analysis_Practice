# -*- coding: utf-8 -*-
"""인공신경망으로 데이터 분석하기.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SIpaaYVMMdyjP39sAr95--yImr4Rnlet
"""

import pandas as pd
import numpy as np

dataset = pd.read_csv('mpg.csv')

dataset.head()

dataset.dropna(inplace=True)

dataset.info()

x = dataset.iloc[:, 0:-1] #feature
y = dataset.iloc[:, -1] #label

#loc-index를 기반으로 가져오는 함수
#iloc-순서대로 가져오는 함수

x.shape, y.shape

from sklearn.preprocessing import StandardScaler

st = StandardScaler() #초기화(선언)

xs = st.fit_transform(x)
x = pd.DataFrame(xs, columns=x.columns)

from sklearn.model_selection import train_test_split

train_x, test_x, train_y, test_y = train_test_split(x, y, test_size=0.2)

from tensorflow.keras.layers import Dense      # 완전연결층 => 가장 기본적인 딥러닝 층
from tensorflow.keras.models import Sequential # Keras 패키지의 Model 생성 함수

model = Sequential()                                           # Sequential은 layer을 순차적으로 쌓는다
model.add(Dense(64,  activation='relu'))                       # Dense (Fully Connected Layer, 완전연결층) 레이어의 입력과 출력을 빠짐없이 모두 연결함. # Node (neuron) 수   # 활성화 함수(activation function) relu (rectified linear unit) 딥러닝에서 가장 많이 사용  
model.add(Dense(32, activation='relu'))   
model.add(Dense(1)) #회귀 문제에서는 단 하나의 계산값

#손실함수? mse
#최적화함수? adom
#오차계산? mse
model.compile(loss='mse', optimizer='adam', metrics=['mse'])

model.summary()

# 학습은 model.fit으로 할 수 있다.

epochs = 10
batch_size = 16

history = model.fit(train_x, train_y, epochs=epochs, batch_size=batch_size, validation_split=0.3,  verbose=1)

from sklearn.metrics import r2_score, mean_squared_error


# 학습 성능 (예측력) 확인하기: R² 와 RMSE (test data)
y_pred = model.predict(test_x)
y_pred[:10]